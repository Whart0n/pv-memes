{"ast":null,"code":"var _jsxFileName = \"/Users/code/PycharmProjects/PV Meme Generator/meme-generator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport MemeGallery from './components/MemeGallery';\nimport TextBoxEditor from './components/TextBoxEditor';\nimport MemeCanvas from './components/MemeCanvas';\nimport AdminPage from './components/AdminPage';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [memeImages, setMemeImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [textBoxes, setTextBoxes] = useState([]);\n  const [selectedTextBoxId, setSelectedTextBoxId] = useState(null);\n  const [showAdmin, setShowAdmin] = useState(false);\n  const [apiError, setApiError] = useState('');\n\n  // Fetch meme templates from the backend API\n  const fetchMemeTemplates = async () => {\n    try {\n      // Try to fetch from API first\n      const response = await fetch('http://localhost:5000/api/templates');\n      if (response.ok) {\n        const templates = await response.json();\n        const templatePaths = templates.map(template => template.path);\n        setMemeImages(templatePaths);\n        setApiError('');\n      } else {\n        throw new Error('Failed to fetch templates from API');\n      }\n    } catch (err) {\n      console.error('Error fetching templates:', err);\n      setApiError('Could not connect to backend server. Using local templates.');\n\n      // Fallback to hardcoded list if API fails\n      const fallbackImages = ['memes/CHEETAH_BUTTON-2.webp', 'memes/Frank_Waiting-2.webp', 'memes/GFUNK__COURTNEY.webp', 'memes/Hilary_Smoking.webp', 'memes/Skull_distracted.webp', 'memes/WHAT_IF_I_TOLD_YOU.webp', 'memes/beanzie_this_is_fine.webp', 'memes/bring_it_marvin.webp', 'memes/drake_wiggles.webp', 'memes/gfunkbuttons.png', 'memes/ivanova_squint_template.webp', 'memes/other_women.webp'];\n      setMemeImages(fallbackImages);\n    }\n  };\n  useEffect(() => {\n    fetchMemeTemplates();\n  }, []);\n\n  // Handle image selection\n  const handleSelectImage = imagePath => {\n    setSelectedImage(imagePath);\n  };\n\n  // Handle adding a new text box\n  const handleAddTextBox = () => {\n    if (textBoxes.length >= 10) return; // Maximum 10 text boxes\n\n    const newTextBox = {\n      id: Date.now().toString(),\n      text: 'Add text here',\n      x: 50,\n      y: 50 + textBoxes.length * 30,\n      // Position each new text box slightly below the previous one\n      fontSize: 36,\n      fontFamily: 'Impact',\n      color: '#ffffff',\n      stroke: 'black',\n      width: 200,\n      height: 50,\n      rotation: 0\n    };\n    const updatedTextBoxes = [...textBoxes, newTextBox];\n    setTextBoxes(updatedTextBoxes);\n    setSelectedTextBoxId(newTextBox.id);\n  };\n\n  // Handle selecting a text box\n  const handleSelectTextBox = id => {\n    setSelectedTextBoxId(id);\n  };\n\n  // Handle updating a text box\n  const handleUpdateTextBox = (id, updates) => {\n    const updatedTextBoxes = textBoxes.map(box => {\n      if (box.id === id) {\n        return {\n          ...box,\n          ...updates\n        };\n      }\n      return box;\n    });\n    setTextBoxes(updatedTextBoxes);\n  };\n\n  // Handle removing a text box\n  const handleRemoveTextBox = id => {\n    const updatedTextBoxes = textBoxes.filter(box => box.id !== id);\n    setTextBoxes(updatedTextBoxes);\n    setSelectedTextBoxId(null);\n  };\n\n  // Toggle admin mode\n  const toggleAdminMode = () => {\n    setShowAdmin(!showAdmin);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"meme-generator\",\n    children: showAdmin ? /*#__PURE__*/_jsxDEV(AdminPage, {\n      onClose: toggleAdminMode,\n      onTemplatesUpdated: fetchMemeTemplates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"meme-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"PV Meme Generator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Create custom memes with your favorite templates\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary admin-button\",\n            onClick: toggleAdminMode,\n            children: \"Admin Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), apiError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"api-error\",\n          children: apiError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme-gallery-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Choose a Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(MemeGallery, {\n          memeImages: memeImages,\n          selectedImage: selectedImage,\n          onSelectImage: handleSelectImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme-editor-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meme-editor-left\",\n          children: /*#__PURE__*/_jsxDEV(MemeCanvas, {\n            selectedImage: selectedImage,\n            textBoxes: textBoxes,\n            selectedTextBoxId: selectedTextBoxId,\n            onSelectTextBox: handleSelectTextBox,\n            onUpdateTextBox: handleUpdateTextBox\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meme-editor-right\",\n          children: /*#__PURE__*/_jsxDEV(TextBoxEditor, {\n            textBoxes: textBoxes,\n            selectedTextBoxId: selectedTextBoxId,\n            onUpdateTextBox: handleUpdateTextBox,\n            onSelectTextBox: handleSelectTextBox,\n            onAddTextBox: handleAddTextBox,\n            onRemoveTextBox: handleRemoveTextBox\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rCexsXz3c5EyMpAiEotqzdqgNBw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MemeGallery","TextBoxEditor","MemeCanvas","AdminPage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","memeImages","setMemeImages","selectedImage","setSelectedImage","textBoxes","setTextBoxes","selectedTextBoxId","setSelectedTextBoxId","showAdmin","setShowAdmin","apiError","setApiError","fetchMemeTemplates","response","fetch","ok","templates","json","templatePaths","map","template","path","Error","err","console","error","fallbackImages","handleSelectImage","imagePath","handleAddTextBox","length","newTextBox","id","Date","now","toString","text","x","y","fontSize","fontFamily","color","stroke","width","height","rotation","updatedTextBoxes","handleSelectTextBox","handleUpdateTextBox","updates","box","handleRemoveTextBox","filter","toggleAdminMode","className","children","onClose","onTemplatesUpdated","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSelectImage","onSelectTextBox","onUpdateTextBox","onAddTextBox","onRemoveTextBox","_c","$RefreshReg$"],"sources":["/Users/code/PycharmProjects/PV Meme Generator/meme-generator/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport MemeGallery from './components/MemeGallery';\nimport TextBoxEditor from './components/TextBoxEditor';\nimport MemeCanvas from './components/MemeCanvas';\nimport AdminPage from './components/AdminPage';\n\nfunction App() {\n  const [memeImages, setMemeImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [textBoxes, setTextBoxes] = useState([]);\n  const [selectedTextBoxId, setSelectedTextBoxId] = useState(null);\n  const [showAdmin, setShowAdmin] = useState(false);\n  const [apiError, setApiError] = useState('');\n  \n  // Fetch meme templates from the backend API\n  const fetchMemeTemplates = async () => {\n    try {\n      // Try to fetch from API first\n      const response = await fetch('http://localhost:5000/api/templates');\n      \n      if (response.ok) {\n        const templates = await response.json();\n        const templatePaths = templates.map(template => template.path);\n        setMemeImages(templatePaths);\n        setApiError('');\n      } else {\n        throw new Error('Failed to fetch templates from API');\n      }\n    } catch (err) {\n      console.error('Error fetching templates:', err);\n      setApiError('Could not connect to backend server. Using local templates.');\n      \n      // Fallback to hardcoded list if API fails\n      const fallbackImages = [\n        'memes/CHEETAH_BUTTON-2.webp',\n        'memes/Frank_Waiting-2.webp',\n        'memes/GFUNK__COURTNEY.webp',\n        'memes/Hilary_Smoking.webp',\n        'memes/Skull_distracted.webp',\n        'memes/WHAT_IF_I_TOLD_YOU.webp',\n        'memes/beanzie_this_is_fine.webp',\n        'memes/bring_it_marvin.webp',\n        'memes/drake_wiggles.webp',\n        'memes/gfunkbuttons.png',\n        'memes/ivanova_squint_template.webp',\n        'memes/other_women.webp'\n      ];\n      setMemeImages(fallbackImages);\n    }\n  };\n  \n  useEffect(() => {\n    fetchMemeTemplates();\n  }, []);\n\n  // Handle image selection\n  const handleSelectImage = (imagePath) => {\n    setSelectedImage(imagePath);\n  };\n\n  // Handle adding a new text box\n  const handleAddTextBox = () => {\n    if (textBoxes.length >= 10) return; // Maximum 10 text boxes\n    \n    const newTextBox = {\n      id: Date.now().toString(),\n      text: 'Add text here',\n      x: 50,\n      y: 50 + textBoxes.length * 30, // Position each new text box slightly below the previous one\n      fontSize: 36,\n      fontFamily: 'Impact',\n      color: '#ffffff',\n      stroke: 'black',\n      width: 200,\n      height: 50,\n      rotation: 0\n    };\n    \n    const updatedTextBoxes = [...textBoxes, newTextBox];\n    setTextBoxes(updatedTextBoxes);\n    setSelectedTextBoxId(newTextBox.id);\n  };\n\n  // Handle selecting a text box\n  const handleSelectTextBox = (id) => {\n    setSelectedTextBoxId(id);\n  };\n\n  // Handle updating a text box\n  const handleUpdateTextBox = (id, updates) => {\n    const updatedTextBoxes = textBoxes.map(box => {\n      if (box.id === id) {\n        return { ...box, ...updates };\n      }\n      return box;\n    });\n    setTextBoxes(updatedTextBoxes);\n  };\n\n  // Handle removing a text box\n  const handleRemoveTextBox = (id) => {\n    const updatedTextBoxes = textBoxes.filter(box => box.id !== id);\n    setTextBoxes(updatedTextBoxes);\n    setSelectedTextBoxId(null);\n  };\n\n  // Toggle admin mode\n  const toggleAdminMode = () => {\n    setShowAdmin(!showAdmin);\n  };\n\n  return (\n    <div className=\"meme-generator\">\n      {showAdmin ? (\n        <AdminPage \n          onClose={toggleAdminMode} \n          onTemplatesUpdated={fetchMemeTemplates} \n        />\n      ) : (\n        <>\n          <header className=\"meme-header\">\n            <h1>PV Meme Generator</h1>\n            <div className=\"header-content\">\n              <p>Create custom memes with your favorite templates</p>\n              <button \n                className=\"btn btn-secondary admin-button\" \n                onClick={toggleAdminMode}\n              >\n                Admin Mode\n              </button>\n            </div>\n            {apiError && <p className=\"api-error\">{apiError}</p>}\n          </header>\n      \n      {/* Template Gallery at the top */}\n      <div className=\"meme-gallery-container\">\n        <h3>Choose a Template</h3>\n        <MemeGallery \n          memeImages={memeImages} \n          selectedImage={selectedImage} \n          onSelectImage={handleSelectImage} \n        />\n      </div>\n      \n      {/* Main editing area with canvas on left and controls on right */}\n      <div className=\"meme-editor-container\">\n        <div className=\"meme-editor-left\">\n          <MemeCanvas \n            selectedImage={selectedImage}\n            textBoxes={textBoxes}\n            selectedTextBoxId={selectedTextBoxId}\n            onSelectTextBox={handleSelectTextBox}\n            onUpdateTextBox={handleUpdateTextBox}\n          />\n        </div>\n        \n        <div className=\"meme-editor-right\">\n          <TextBoxEditor \n            textBoxes={textBoxes}\n            selectedTextBoxId={selectedTextBoxId}\n            onUpdateTextBox={handleUpdateTextBox}\n            onSelectTextBox={handleSelectTextBox}\n            onAddTextBox={handleAddTextBox}\n            onRemoveTextBox={handleRemoveTextBox}\n          />\n        </div>\n      </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACsB,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMwB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;MAEnE,IAAID,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC,MAAMC,aAAa,GAAGF,SAAS,CAACG,GAAG,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;QAC9DpB,aAAa,CAACiB,aAAa,CAAC;QAC5BP,WAAW,CAAC,EAAE,CAAC;MACjB,CAAC,MAAM;QACL,MAAM,IAAIW,KAAK,CAAC,oCAAoC,CAAC;MACvD;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAAC;MAC/CZ,WAAW,CAAC,6DAA6D,CAAC;;MAE1E;MACA,MAAMe,cAAc,GAAG,CACrB,6BAA6B,EAC7B,4BAA4B,EAC5B,4BAA4B,EAC5B,2BAA2B,EAC3B,6BAA6B,EAC7B,+BAA+B,EAC/B,iCAAiC,EACjC,4BAA4B,EAC5B,0BAA0B,EAC1B,wBAAwB,EACxB,oCAAoC,EACpC,wBAAwB,CACzB;MACDzB,aAAa,CAACyB,cAAc,CAAC;IAC/B;EACF,CAAC;EAEDrC,SAAS,CAAC,MAAM;IACduB,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMe,iBAAiB,GAAIC,SAAS,IAAK;IACvCzB,gBAAgB,CAACyB,SAAS,CAAC;EAC7B,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAIzB,SAAS,CAAC0B,MAAM,IAAI,EAAE,EAAE,OAAO,CAAC;;IAEpC,MAAMC,UAAU,GAAG;MACjBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBC,IAAI,EAAE,eAAe;MACrBC,CAAC,EAAE,EAAE;MACLC,CAAC,EAAE,EAAE,GAAGlC,SAAS,CAAC0B,MAAM,GAAG,EAAE;MAAE;MAC/BS,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,QAAQ;MACpBC,KAAK,EAAE,SAAS;MAChBC,MAAM,EAAE,OAAO;MACfC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE;IACZ,CAAC;IAED,MAAMC,gBAAgB,GAAG,CAAC,GAAG1C,SAAS,EAAE2B,UAAU,CAAC;IACnD1B,YAAY,CAACyC,gBAAgB,CAAC;IAC9BvC,oBAAoB,CAACwB,UAAU,CAACC,EAAE,CAAC;EACrC,CAAC;;EAED;EACA,MAAMe,mBAAmB,GAAIf,EAAE,IAAK;IAClCzB,oBAAoB,CAACyB,EAAE,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMgB,mBAAmB,GAAGA,CAAChB,EAAE,EAAEiB,OAAO,KAAK;IAC3C,MAAMH,gBAAgB,GAAG1C,SAAS,CAACe,GAAG,CAAC+B,GAAG,IAAI;MAC5C,IAAIA,GAAG,CAAClB,EAAE,KAAKA,EAAE,EAAE;QACjB,OAAO;UAAE,GAAGkB,GAAG;UAAE,GAAGD;QAAQ,CAAC;MAC/B;MACA,OAAOC,GAAG;IACZ,CAAC,CAAC;IACF7C,YAAY,CAACyC,gBAAgB,CAAC;EAChC,CAAC;;EAED;EACA,MAAMK,mBAAmB,GAAInB,EAAE,IAAK;IAClC,MAAMc,gBAAgB,GAAG1C,SAAS,CAACgD,MAAM,CAACF,GAAG,IAAIA,GAAG,CAAClB,EAAE,KAAKA,EAAE,CAAC;IAC/D3B,YAAY,CAACyC,gBAAgB,CAAC;IAC9BvC,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC;;EAED;EACA,MAAM8C,eAAe,GAAGA,CAAA,KAAM;IAC5B5C,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;EAED,oBACEb,OAAA;IAAK2D,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5B/C,SAAS,gBACRb,OAAA,CAACF,SAAS;MACR+D,OAAO,EAAEH,eAAgB;MACzBI,kBAAkB,EAAE7C;IAAmB;MAAA8C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,gBAEFlE,OAAA,CAAAE,SAAA;MAAA0D,QAAA,gBACE5D,OAAA;QAAQ2D,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC7B5D,OAAA;UAAA4D,QAAA,EAAI;QAAiB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1BlE,OAAA;UAAK2D,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7B5D,OAAA;YAAA4D,QAAA,EAAG;UAAgD;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACvDlE,OAAA;YACE2D,SAAS,EAAC,gCAAgC;YAC1CQ,OAAO,EAAET,eAAgB;YAAAE,QAAA,EAC1B;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,EACLnD,QAAQ,iBAAIf,OAAA;UAAG2D,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAE7C;QAAQ;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC,eAGblE,OAAA;QAAK2D,SAAS,EAAC,wBAAwB;QAAAC,QAAA,gBACrC5D,OAAA;UAAA4D,QAAA,EAAI;QAAiB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1BlE,OAAA,CAACL,WAAW;UACVU,UAAU,EAAEA,UAAW;UACvBE,aAAa,EAAEA,aAAc;UAC7B6D,aAAa,EAAEpC;QAAkB;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGNlE,OAAA;QAAK2D,SAAS,EAAC,uBAAuB;QAAAC,QAAA,gBACpC5D,OAAA;UAAK2D,SAAS,EAAC,kBAAkB;UAAAC,QAAA,eAC/B5D,OAAA,CAACH,UAAU;YACTU,aAAa,EAAEA,aAAc;YAC7BE,SAAS,EAAEA,SAAU;YACrBE,iBAAiB,EAAEA,iBAAkB;YACrC0D,eAAe,EAAEjB,mBAAoB;YACrCkB,eAAe,EAAEjB;UAAoB;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENlE,OAAA;UAAK2D,SAAS,EAAC,mBAAmB;UAAAC,QAAA,eAChC5D,OAAA,CAACJ,aAAa;YACZa,SAAS,EAAEA,SAAU;YACrBE,iBAAiB,EAAEA,iBAAkB;YACrC2D,eAAe,EAAEjB,mBAAoB;YACrCgB,eAAe,EAAEjB,mBAAoB;YACrCmB,YAAY,EAAErC,gBAAiB;YAC/BsC,eAAe,EAAEhB;UAAoB;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA,eACF;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC9D,EAAA,CArKQD,GAAG;AAAAsE,EAAA,GAAHtE,GAAG;AAuKZ,eAAeA,GAAG;AAAC,IAAAsE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}